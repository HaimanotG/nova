generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider                = "node node_modules/prisma-nestjs-graphql"
  output                  = "../../../generated-db-types/src"
  purgeOutput             = false
  combineScalarFilters    = true
  emitSingle              = true
  noAtomicOperations      = true
  // field validator
  fields_Validator_input  = true
  fields_Validator_output = true
  fields_Validator_model  = true
  fields_Validator_from   = "class-validator"
  // Args where|data nested validator
  decorate_1_type         = "*Args"
  decorate_1_field        = "@(data|where)"
  decorate_1_name         = ValidateNested
  decorate_1_from         = "class-validator"
  decorate_1_arguments    = "[]"
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Example {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Todo {
  id        String   @id @unique
  /// @Validator.MinLength(3)
  /// @validator.MaxLength(100)
  text      String
  completed Boolean
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
  Todo          Todo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
